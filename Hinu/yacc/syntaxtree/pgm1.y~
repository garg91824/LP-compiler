%{
#include <stdio.h>
#include <stdlib.h>
struct node
{
	char data;
	struct node *left, *right;
};
%}
%token NUMBER ID NL
%left '+''-'
%left '*' '/'
%%
stmt : exp NL { print_tree($1); exit(0); }
	;
exp :	exp '+' exp { mknode('+' , $1, $3); }
	| exp '-' exp { mknode('-', $1, $3);}
	| exp '*' exp { mknode('*', $1, $3);}
	| exp '/' exp {
			if($3==0)
			{
				printf("cannot divide by 0 \n"); exit(0);
			}
			else
			{
			 	mknode('/', $1, $3);
			}
		       }
	|'(' exp ')' { $$ = $2 ;}
	| ID { $$ = $1 ; }
	| NUMBER { $$=$1;}
	;
%%
int yyerror(char *msg)
{
	printf("INVALID expression \n");
	exit(0);
}


main()
{
	printf("enter expression \n");
	yyparse();
}
void mknode(char c,node n1,node n2)
{
	struct node *temp = (struct node*) malloc(sizeof(struct node));
	temp->data=c;
	temp->left = n1;
	temp->right = n2;
}
void print_tree(node n1)
{
	print_tree(n1->left);
	printf(n1->data);
	print_tree(n1->right);
}
